from typing import Any, Callable, Iterator
from magic_pdf.data.dataset import Dataset, PageableData
from magic_pdf.data.dataset import Doc
from magic_pdf.config.enums import SupportedPdfParseMethod
from magic_pdf.filter import classify
from magic_pdf.data.dataset import Dataset
from magic_pdf.data.data_reader_writer import FileBasedDataWriter, FileBasedDataReader
from loguru import logger
import fitz
import os
import sys


class PymuDocDataset(Dataset):
    def __init__(self, bits: bytes, text_images=None, lang=None, langdetect_model=None):
        """Initialize the dataset, which wraps the pymudoc documents.

        Args:
            bits (bytes): the bytes of the pdf
        """
        self._raw_fitz = fitz.open('pdf', bits)
        self._records = [Doc(v) for v in self._raw_fitz]
        self._data_bits = bits
        self._raw_data = bits


        if lang == '':
            self._lang = None
        elif lang == 'auto':
            self._lang = langdetect_model.do_detect(text_images)
            logger.info(f"lang: {lang}, detect_lang: {self._lang}")
        else:
            self._lang = lang
            logger.info(f"lang: {lang}")

    def __len__(self) -> int:
        """The page number of the pdf."""
        return len(self._records)

    def __iter__(self) -> Iterator[PageableData]:
        """Yield the page doc object."""
        return iter(self._records)

    def supported_methods(self) -> list[SupportedPdfParseMethod]:
        """The method supported by this dataset.

        Returns:
            list[SupportedPdfParseMethod]: the supported methods
        """
        return [SupportedPdfParseMethod.OCR, SupportedPdfParseMethod.TXT]

    def data_bits(self) -> bytes:
        """The pdf bits used to create this dataset."""
        return self._data_bits

    def get_page(self, page_id: int) -> PageableData:
        """The page doc object.

        Args:
            page_id (int): the page doc index

        Returns:
            PageableData: the page doc object
        """
        return self._records[page_id]

    def dump_to_file(self, file_path: str):
        """Dump the file

        Args: 
            file_path (str): the file path 
        """
        
        dir_name = os.path.dirname(file_path)
        if dir_name not in ('', '.', '..'):
            os.makedirs(dir_name, exist_ok=True)
        self._raw_fitz.save(file_path)

    def apply(self, proc: Callable, *args, **kwargs):
        """Apply callable method which.

        Args:
            proc (Callable): invoke proc as follows:
                proc(dataset, *args, **kwargs)

        Returns:
            Any: return the result generated by proc
        """
        if 'lang' in kwargs and self._lang is not None:
            kwargs['lang'] = self._lang
        return proc(self, *args, **kwargs)

    def classify(self) -> SupportedPdfParseMethod:
        """classify the dataset 

        Returns:
            SupportedPdfParseMethod: _description_
        """
        return classify(self._data_bits)

    def clone(self):
        """clone this dataset
        """
        return PymuDocDataset(self._raw_data)
        

class DirPreprocessing:

    def __init__(self, file):
        self.file = file

    def get(self):
        name_without_suff = os.path.splitext(self.file)[0]
        current_path = os.path.abspath(os.path.dirname(sys.argv[0]))
        
        local_image_dir = os.path.join(current_path, "output", name_without_suff, "images")
        local_md_dir = os.path.join(current_path, "output",name_without_suff, "files")

        os.makedirs(local_image_dir, exist_ok=True)
        os.makedirs(local_md_dir, exist_ok=True)

        image_writer = FileBasedDataWriter(local_image_dir)
        md_writer = FileBasedDataWriter(local_md_dir)

        return name_without_suff, local_image_dir, local_md_dir, image_writer, md_writer